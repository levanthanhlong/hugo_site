[{"categories":null,"content":"Introduction The Tina schema defines the shape of your content. Tina uses a \u0026ldquo;content-modeling as code\u0026rdquo; approach. This has a few benefits compared to modelling through a UI:\nThe schema is version-controlled Mutating the schema is easy, as you can test out changes locally, or in a branch. The developer can extend the schema in interesting ways (custom validation, custom UI fields, etc). The content model, and all configuration code is defined in a file called tina/config.{ts,js,tsx}.\n// tina/config.{ts,js,tsx} import { defineConfig } from \u0026#39;tinacms\u0026#39; export default defineConfig({ // ... schema: { collections: [ { label: \u0026#39;Blog Posts\u0026#39;, name: \u0026#39;post\u0026#39;, path: \u0026#39;content/posts\u0026#39;, fields: [ { type: \u0026#39;string\u0026#39;, label: \u0026#39;Title\u0026#39;, name: \u0026#39;title\u0026#39;, }, { type: \u0026#39;string\u0026#39;, label: \u0026#39;Post Body\u0026#39;, name: \u0026#39;body\u0026#39;, isBody: true, }, ], }, ], }, }) ","permalink":"http://localhost:1313/posts/content-modeling-with-tinacms-copy/","tags":null,"title":"Content Modeling with TinaCMS"},{"categories":null,"content":"Introduction 11 With Tina, your content is stored in Git along with your codebase. Tina provides a Content API in front of your repo-based content, so that you can interact with your files as if they\u0026rsquo;re in a database.\nYou can:\nQuery content for a given collection222 Apply filters, sorting, pagination, etc1 ádfsadfsdfưqwe Query your content based on relational fields.12 To interface with the API, you can use Tina\u0026rsquo;s type-safe client for dádfsdfata-fetc22hing, or 222 manually write custom GraphQL queries and hit the API yourself. 11112213\n// tina/config.{js,ts,tsx} export default defineConfig({ schema, token: \u0026#39;***\u0026#39;, clientId: \u0026#39;***\u0026#39;, branch: \u0026#39;main\u0026#39;, }) When working locally, the client is built with the local url (http://localhost:4001/graphql ). When in production mode , clientId, branch and token are used to query Tina Cloud.\nTina client provides a type-safe query builder, that is auto-generated based on your site\u0026rsquo;s schema:\\\nimport { client } from \u0026#39;../[pathToTina]/tina/__generated__/client\u0026#39; const myPost = await client.queries.post({ relativePath: \u0026#39;HelloWorld.md\u0026#39; }) console.log(myPost.data.title) The above client.queries.post query is not built-in to Tina\u0026rsquo;s API. This is an example of a query based on your defined schema, (where you have a \u0026ldquo;post\u0026rdquo; collection defined).\nOn a page that displays a list of posts, you can fetch the posts like so:\\\nconst postsResponse = await client.queries.postConnection() const posts = postsResponse.data.postConnection.edges.map((post) =\u0026gt; { return { slug: post.node._sys.filename } }) // This would return an array like: [ { slug: \u0026#39;HelloWorld.md\u0026#39;}, /*...*/ ] For more information on manually writing queries for your specific schema, check out our \u0026ldquo;Writing Custom Queries\u0026rdquo; docs.\n\\\n","permalink":"http://localhost:1313/posts/data-fetching/","tags":null,"title":"Data Fetching"},{"categories":null,"content":"Introduction The Tina schema defines the shape of your content. Tina uses a \u0026ldquo;content-modeling as code\u0026rdquo; approach. This has a few benefits compared to modelling through a UI:\nThe schema is version-controlled Mutating the schema is easy, as you can test out changes locally, or in a branch. The developer can extend the schema in interesting ways (custom validation, custom UI fields, etc). The content model, and all configuration code is defined in a file called tina/config.{ts,js,tsx}.123\n","permalink":"http://localhost:1313/posts/hugo--tinacms-setup-guide/","tags":null,"title":"Hugo + TinaCMS Setup Guide"},{"categories":null,"content":"Tina is very flexible \u0026amp; extendable, so any Tina site may have a unique experience. As an introduction, we\u0026rsquo;ll cover the out-of-the-box experience that most of our starters implement.\nEntering the CMS When tina is initialized it creates a static build of your site, and a /admin route that allows you to edit your site\u0026rsquo;s content. The static build is located at \u0026lt;PublicFolder\u0026gt;/admin/index.html.\nWhen this page is visited in the browser, the Tina CMS is loaded and the user is prompted to log in.\n","permalink":"http://localhost:1313/posts/using-the-tina-editor/","tags":null,"title":"Using the Tina Editor"},{"categories":null,"content":"TinaCloud is a hosted datalayer for TinaCMS. TinaCloud is the easiest way to use TinaCMS in production. It provides a hosted GraphQL endpoint for your content, Git integration, user management, editorial workflow features and more. It also grants authorization for other users (content creators, editors, marketers, etc) to login and edit their site without needing to grant direct access to the repository in GitHub. TinaCMS can be self-hosted or used independently of TinaCloud as well.\nFor more information, see TinaCloud Overview .\nWhere can I get help or share an idea for TinaCMS or TinaCloud? Check out our communities at https://tina.io/community/ What is Tina\u0026rsquo;s tech stack? TinaCloud Content querying + indexing - Node Cloud provider - AWS Identity management - Go TinaCMS CMS - React 18 What features are unavailable in self-hosted Tina compared to TinaCloud? When comparing TinaCloud with self-hosting Tina, there are specific features unique to TinaCloud. These include:\n1. Git Backed Media In TinaCloud, there\u0026rsquo;s a Git backed media feature. This integrates media into the Tina Media Manager and commits it directly to the Git repository. However, this functionality is not present in self-hosted Tina.\nThe reason for its absence is due to the process involving media uploads. When using the media manager in TinaCloud, images are uploaded to TinaCloud servers and distributed via a CDN. This ensures that images are accessible through the Tina Media Manager, as they require a URL for accessibility. Without this, images won\u0026rsquo;t appear in the Media Manager until the site is rebuilt.\n2. Dynamic Branch Switching at Runtime TinaCloud allows for changing the content branch at runtime, a feature managed through URL modification. However, in self-hosted Tina, changing branches is restricted to the build phase only.\nThis limitation means that commands like:\n","permalink":"http://localhost:1313/posts/what-is-tinacloud/","tags":null,"title":"What is TinaCloud?"},{"categories":null,"content":"","permalink":"http://localhost:1313/manifest.json","tags":null,"title":""},{"categories":null,"content":"","permalink":"http://localhost:1313/search/_index.de/","tags":null,"title":""},{"categories":null,"content":"","permalink":"http://localhost:1313/search/_index.es/","tags":null,"title":""},{"categories":null,"content":"","permalink":"http://localhost:1313/search/_index.fr/","tags":null,"title":""},{"categories":null,"content":"","permalink":"http://localhost:1313/search/_index.hi/","tags":null,"title":""},{"categories":null,"content":"","permalink":"http://localhost:1313/search/_index.jp/","tags":null,"title":""},{"categories":null,"content":"","permalink":"http://localhost:1313/search/_index.nl/","tags":null,"title":""},{"categories":null,"content":"","permalink":"http://localhost:1313/search/_index.pl/","tags":null,"title":""},{"categories":null,"content":"","permalink":"http://localhost:1313/search/_index.ru/","tags":null,"title":""},{"categories":null,"content":"","permalink":"http://localhost:1313/search/_index.zh-cn/","tags":null,"title":""}]